#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Run Exploit Search System

This script provides a convenient way to run the exploit search system
to search for exploits for services detected in a target system and 
generate comprehensive reports with usage instructions.
"""

import os
import sys
import argparse
import datetime
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("ExploitSearchRunner")

def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="Run Exploit Search System")
    parser.add_argument("target", help="Target IP address, hostname, or network range")
    parser.add_argument("--scan-type", choices=["quick", "standard", "comprehensive"], 
                       default="standard", help="Type of scan to perform")
    parser.add_argument("--output-dir", "-o", default="exploit_search_reports", 
                       help="Output directory for reports")
    parser.add_argument("--services-file", "-s", 
                       help="Path to a JSON file containing service information (instead of scanning)")
    
    args = parser.parse_args()
    
    # Try to import ExploitSearchSystem
    try:
        from exploit_search_system import ExploitSearchSystem
    except ImportError:
        logger.error("Error: ExploitSearchSystem module not found.")
        logger.error("Make sure exploit_search_system.py is in the current directory or Python path.")
        return 1
    
    # Create timestamp for output directory
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    report_dir = os.path.join(args.output_dir, f"exploit_search_{timestamp}")
    
    # Ensure output directory exists
    os.makedirs(report_dir, exist_ok=True)
    
    # Create the exploit search system
    search_system = ExploitSearchSystem(output_dir=report_dir)
    
    try:
        # If services file is provided, use it
        if args.services_file:
            logger.info(f"Using services from file: {args.services_file}")
            exploit_results = search_system.search_exploits(services_file=args.services_file)
        else:
            # Detect services
            logger.info(f"Detecting services on target: {args.target}")
            detected_services = search_system.detect_services(
                target=args.target, 
                scan_type=args.scan_type
            )
            
            # Search for exploits
            logger.info(f"Searching for exploits for {len(detected_services.get('services', []))} services")
            exploit_results = search_system.search_exploits(
                services=detected_services.get("services", [])
            )
        
        # Document exploits
        logger.info("Documenting exploits with detailed usage instructions")
        documented_results = search_system.document_exploits(exploit_results=exploit_results)
        
        # Generate report
        logger.info("Generating comprehensive report")
        report_file = search_system.generate_comprehensive_report(documented_results=documented_results)
        
        logger.info(f"Exploit search completed successfully")
        logger.info(f"Found {len(documented_results.get('exploits', []))} exploits for {len(documented_results.get('services', []))} services")
        logger.info(f"Comprehensive report generated: {report_file}")
        
        # Check for HTML report
        html_report = os.path.join(search_system.report_dir, "comprehensive_exploit_report.html")
        if os.path.exists(html_report):
            logger.info(f"HTML report available at: {html_report}")
        
        # Check for exploitation guide
        exploitation_guide = os.path.join(search_system.report_dir, "exploitation_guide.md")
        if os.path.exists(exploitation_guide):
            logger.info(f"Detailed exploitation guide available at: {exploitation_guide}")
        
        return 0
    
    except Exception as e:
        logger.error(f"Error running exploit search: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return 1

if __name__ == "__main__":
    sys.exit(main()) 