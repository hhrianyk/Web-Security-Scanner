#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import logging
import datetime
import time
import markdown
import pdfkit
import jinja2
from collections import defaultdict
from pathlib import Path
import re
import requests
from urllib.parse import urlparse
import sys

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("client_vulnerability_reporting.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("ClientVulnerabilityReporter")

class ClientVulnerabilityReporter:
    """
    Client-focused vulnerability reporter with detailed exploitation scenarios,
    impact analysis, and remediation instructions.
    
    Features:
    - Step-by-step exploitation scenarios with screenshots
    - Business impact analysis
    - Risk assessment with potential financial impact
    - Detailed remediation instructions with code examples
    - Executive summary for management
    - Technical details for security teams
    - Multiple output formats (JSON, HTML, PDF)
    """
    
    def __init__(self, report_dir="client_reports"):
        self.report_dir = report_dir
        self.timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Ensure report directory exists
        os.makedirs(self.report_dir, exist_ok=True)
        
        # Define risk rating system with business impact
        self.risk_levels = {
            "Critical": {
                "score_range": (9, 10),
                "color": "#FF0000",  # Red
                "description": "Immediate action required. These vulnerabilities represent an immediate and direct threat to the organization.",
                "business_impact": "May lead to significant data breach, regulatory fines, brand damage, or service disruption. Potential financial impact: $100,000+",
                "remediation_timeline": "Immediate (24-48 hours)"
            },
            "High": {
                "score_range": (7, 8.9),
                "color": "#FF4500",  # OrangeRed
                "description": "Urgent action required. These vulnerabilities could lead to significant data compromise or system takeover.",
                "business_impact": "May lead to data breach, limited service disruption, or compliance issues. Potential financial impact: $50,000-$100,000",
                "remediation_timeline": "Urgent (1 week)"
            },
            "Medium": {
                "score_range": (4, 6.9),
                "color": "#FFA500",  # Orange
                "description": "Action required. These vulnerabilities pose a moderate risk to the organization's assets.",
                "business_impact": "May lead to limited data exposure or temporary system issues. Potential financial impact: $10,000-$50,000",
                "remediation_timeline": "Near-term (1 month)"
            },
            "Low": {
                "score_range": (1, 3.9),
                "color": "#FFFF00",  # Yellow
                "description": "Should be addressed in the regular development cycle. These vulnerabilities pose minimal risk.",
                "business_impact": "Limited to no business impact expected. Potential financial impact: <$10,000",
                "remediation_timeline": "Regular development cycle (3 months)"
            },
            "Informational": {
                "score_range": (0, 0.9),
                "color": "#1E90FF",  # DodgerBlue
                "description": "These findings do not represent a direct security risk but may help attackers gather information about the system.",
                "business_impact": "No direct business impact, but may provide information to attackers",
                "remediation_timeline": "Best practice implementation (6 months)"
            }
        }
        
        # Load templates
        self.template_loader = jinja2.FileSystemLoader(searchpath="./templates")
        self.template_env = jinja2.Environment(loader=self.template_loader)
        
        # Try to create templates directory if it doesn't exist
        os.makedirs("./templates", exist_ok=True)
        
        # Create report templates if they don't exist
        self._ensure_report_templates_exist()
    
    def _ensure_report_templates_exist(self):
        """Ensure that the report templates exist, create them if they don't"""
        report_template_path = os.path.join("templates", "client_vulnerability_report.html")
        
        if not os.path.exists(report_template_path):
            # Create a client-focused template with detailed exploitation sections
            template_content = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ report.title }}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        h1, h2, h3, h4 {
            color: #1a5276;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #ddd;
        }
        .logo {
            max-width: 200px;
            margin-bottom: 20px;
        }
        .executive-summary {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 30px;
        }
        .vulnerability {
            margin-bottom: 40px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .critical {
            border-left: 5px solid {{ risk_levels.Critical.color }};
        }
        .high {
            border-left: 5px solid {{ risk_levels.High.color }};
        }
        .medium {
            border-left: 5px solid {{ risk_levels.Medium.color }};
        }
        .low {
            border-left: 5px solid {{ risk_levels.Low.color }};
        }
        .informational {
            border-left: 5px solid {{ risk_levels.Informational.color }};
        }
        .severity-badge {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 4px;
            color: white;
            font-weight: bold;
            margin-right: 10px;
        }
        .severity-critical {
            background-color: {{ risk_levels.Critical.color }};
        }
        .severity-high {
            background-color: {{ risk_levels.High.color }};
        }
        .severity-medium {
            background-color: {{ risk_levels.Medium.color }};
        }
        .severity-low {
            background-color: {{ risk_levels.Low.color }};
        }
        .severity-informational {
            background-color: {{ risk_levels.Informational.color }};
        }
        .exploitation-steps {
            background-color: #f5f5f5;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .business-impact {
            background-color: #ffecec;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .remediation {
            background-color: #e8f4f8;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .code-block {
            background-color: #f1f1f1;
            padding: 10px;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            overflow-x: auto;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
            padding: 10px;
            text-align: left;
        }
        td {
            padding: 10px;
        }
        .risk-chart {
            margin: 30px 0;
        }
        .footer {
            margin-top: 50px;
            text-align: center;
            font-size: 0.9em;
            color: #666;
            border-top: 1px solid #ddd;
            padding-top: 20px;
        }
        .screenshot {
            max-width: 100%;
            border: 1px solid #ddd;
            margin: 10px 0;
            border-radius: 3px;
        }
        .attack-scenario {
            background-color: #fff9f9;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            border-left: 3px solid #ff6b6b;
        }
        .command-example {
            background-color: #2d2d2d;
            color: #f8f8f2;
            padding: 10px;
            border-radius: 4px;
            margin: 10px 0;
            font-family: 'Courier New', monospace;
        }
        .tool-item {
            display: inline-block;
            background-color: #e3f2fd;
            padding: 3px 8px;
            border-radius: 3px;
            margin: 2px;
        }
        .impact-item {
            margin: 5px 0;
        }
        .tab {
            overflow: hidden;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
            border-radius: 4px 4px 0 0;
        }
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 10px 16px;
            transition: 0.3s;
            font-size: 14px;
        }
        .tab button:hover {
            background-color: #ddd;
        }
        .tab button.active {
            background-color: #3498db;
            color: white;
        }
        .tabcontent {
            display: none;
            padding: 15px;
            border: 1px solid #ccc;
            border-top: none;
            border-radius: 0 0 4px 4px;
        }
        .tabcontent.active {
            display: block;
        }
    </style>
    <script>
        function openTab(evt, tabName, vulnId) {
            var i, tabcontent, tablinks;
            tabcontent = document.querySelectorAll("#" + vulnId + " .tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
                tabcontent[i].className = tabcontent[i].className.replace(" active", "");
            }
            tablinks = document.querySelectorAll("#" + vulnId + " .tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).style.display = "block";
            document.getElementById(tabName).className += " active";
            evt.currentTarget.className += " active";
        }
        
        window.onload = function() {
            // Set the first tab as active for each vulnerability
            const vulnerabilities = document.querySelectorAll('.vulnerability');
            vulnerabilities.forEach(vuln => {
                const firstTabBtn = vuln.querySelector('.tablinks');
                const firstTabContent = vuln.querySelector('.tabcontent');
                if (firstTabBtn && firstTabContent) {
                    firstTabBtn.className += " active";
                    firstTabContent.style.display = "block";
                    firstTabContent.className += " active";
                }
            });
        }
    </script>
</head>
<body>
    <div class="header">
        {% if report.logo_path %}
        <img src="{{ report.logo_path }}" alt="Company Logo" class="logo">
        {% endif %}
        <h1>{{ report.title }}</h1>
        <p>Generated on: {{ report.date }}</p>
        <p>Target: {{ report.target }}</p>
        <p>Report ID: {{ report.report_id }}</p>
    </div>
    
    <div class="executive-summary">
        <h2>Executive Summary</h2>
        <p>{{ report.executive_summary }}</p>
        
        <h3>Risk Overview</h3>
        <p>Overall Risk Rating: <span class="severity-badge severity-{{ report.overall_risk_level|lower }}">{{ report.overall_risk_level }}</span></p>
        
        <table>
            <tr>
                <th>Risk Level</th>
                <th>Count</th>
                <th>Business Impact</th>
                <th>Recommended Timeline</th>
            </tr>
            {% for level, count in report.risk_summary.items() %}
            <tr>
                <td><span class="severity-badge severity-{{ level|lower }}">{{ level }}</span></td>
                <td>{{ count }}</td>
                <td>{{ risk_levels[level].business_impact }}</td>
                <td>{{ risk_levels[level].remediation_timeline }}</td>
            </tr>
            {% endfor %}
        </table>

        <h3>Key Findings</h3>
        <ul>
            {% for finding in report.key_findings %}
            <li>{{ finding }}</li>
            {% endfor %}
        </ul>
    </div>
    
    <h2>Vulnerability Details</h2>
    
    {% for vuln in report.vulnerabilities %}
    <div class="vulnerability {{ vuln.severity|lower }}" id="vuln-{{ loop.index }}">
        <h3>
            <span class="severity-badge severity-{{ vuln.severity|lower }}">{{ vuln.severity }}</span>
            {{ vuln.name }}
        </h3>
        
        <table>
            <tr>
                <th>Category</th>
                <td>{{ vuln.category }}</td>
            </tr>
            <tr>
                <th>Risk Score</th>
                <td>{{ vuln.risk_score }}</td>
            </tr>
            <tr>
                <th>Affected Component</th>
                <td>{{ vuln.affected_component }}</td>
            </tr>
            <tr>
                <th>CVSS Vector (if applicable)</th>
                <td>{{ vuln.cvss_vector|default('N/A') }}</td>
            </tr>
            <tr>
                <th>CWE</th>
                <td>{{ vuln.cwe_id|default('N/A') }} - {{ vuln.cwe_name|default('N/A') }}</td>
            </tr>
        </table>
        
        <div class="tab">
            <button class="tablinks" onclick="openTab(event, 'vuln-{{ loop.index }}-overview', 'vuln-{{ loop.index }}')">Overview</button>
            <button class="tablinks" onclick="openTab(event, 'vuln-{{ loop.index }}-exploitation', 'vuln-{{ loop.index }}')">Exploitation</button>
            <button class="tablinks" onclick="openTab(event, 'vuln-{{ loop.index }}-impact', 'vuln-{{ loop.index }}')">Impact</button>
            <button class="tablinks" onclick="openTab(event, 'vuln-{{ loop.index }}-remediation', 'vuln-{{ loop.index }}')">Remediation</button>
        </div>
        
        <div id="vuln-{{ loop.index }}-overview" class="tabcontent">
            <h4>Description</h4>
            <p>{{ vuln.description }}</p>
            
            <h4>Technical Details</h4>
            <p>{{ vuln.technical_details }}</p>
        </div>
        
        <div id="vuln-{{ loop.index }}-exploitation" class="tabcontent">
            <h4>Exploitation Scenario</h4>
            <div class="exploitation-steps">
                <h5>Steps to Reproduce</h5>
                <ol>
                    {% for step in vuln.exploitation_steps %}
                    <li>{{ step }}</li>
                    {% endfor %}
                </ol>
                
                {% if vuln.exploitation_screenshots %}
                <h5>Proof of Concept Screenshots</h5>
                {% for screenshot in vuln.exploitation_screenshots %}
                <figure>
                    <img src="{{ screenshot.path }}" alt="{{ screenshot.description }}" class="screenshot">
                    <figcaption>{{ screenshot.description }}</figcaption>
                </figure>
                {% endfor %}
                {% endif %}
                
                {% if vuln.exploitation_code %}
                <h5>Proof of Concept Code</h5>
                <div class="code-block">
                    <pre>{{ vuln.exploitation_code }}</pre>
                </div>
                {% endif %}
                
                {% if vuln.exploitation_commands %}
                <h5>Command Examples</h5>
                {% for cmd in vuln.exploitation_commands %}
                <div class="command-example">{{ cmd }}</div>
                {% endfor %}
                {% endif %}
                
                {% if vuln.exploitation_tools %}
                <h5>Required Tools</h5>
                <p>
                    {% for tool in vuln.exploitation_tools %}
                    <span class="tool-item">{{ tool }}</span>
                    {% endfor %}
                </p>
                {% endif %}
            </div>
            
            <h4>Potential Attack Scenario</h4>
            <div class="attack-scenario">
                <p>{{ vuln.attack_scenario }}</p>
            </div>
        </div>
        
        <div id="vuln-{{ loop.index }}-impact" class="tabcontent">
            <h4>Business Impact</h4>
            <div class="business-impact">
                <p>{{ vuln.business_impact.description }}</p>
                
                <h5>Potential Consequences</h5>
                <ul>
                    {% for consequence in vuln.business_impact.consequences %}
                    <li>{{ consequence }}</li>
                    {% endfor %}
                </ul>
                
                {% if vuln.business_impact.financial_impact %}
                <h5>Estimated Financial Impact</h5>
                <p>{{ vuln.business_impact.financial_impact }}</p>
                {% endif %}
                
                {% if vuln.business_impact.regulatory_impact %}
                <h5>Regulatory Implications</h5>
                <p>{{ vuln.business_impact.regulatory_impact }}</p>
                {% endif %}
            </div>
            
            {% if vuln.detailed_exploitation and vuln.detailed_exploitation.potential_impact %}
            <h4>Technical Impact</h4>
            <div class="business-impact">
                <ul>
                    {% for impact in vuln.detailed_exploitation.potential_impact %}
                    <li>{{ impact }}</li>
                    {% endfor %}
                </ul>
            </div>
            {% endif %}
        </div>
        
        <div id="vuln-{{ loop.index }}-remediation" class="tabcontent">
            <h4>Remediation</h4>
            <div class="remediation">
                <p>{{ vuln.remediation.description }}</p>
                
                <h5>Recommended Steps</h5>
                <ol>
                    {% for step in vuln.remediation.steps %}
                    <li>{{ step }}</li>
                    {% endfor %}
                </ol>
                
                {% if vuln.remediation.code_examples %}
                <h5>Code Examples</h5>
                <div class="code-block">
                    <pre>{{ vuln.remediation.code_examples }}</pre>
                </div>
                {% endif %}
                
                <h5>Additional Resources</h5>
                <ul>
                    {% for resource in vuln.remediation.references %}
                    <li><a href="{{ resource.url }}">{{ resource.title }}</a></li>
                    {% endfor %}
                </ul>
            </div>
        </div>
    </div>
    {% endfor %}
    
    <h2>Remediation Plan</h2>
    <p>{{ report.remediation_plan.description }}</p>
    
    <h3>Prioritized Actions</h3>
    <table>
        <tr>
            <th>Priority</th>
            <th>Vulnerability</th>
            <th>Recommended Action</th>
            <th>Timeline</th>
        </tr>
        {% for action in report.remediation_plan.prioritized_actions %}
        <tr>
            <td>{{ action.priority }}</td>
            <td>{{ action.vulnerability }}</td>
            <td>{{ action.action }}</td>
            <td>{{ action.timeline }}</td>
        </tr>
        {% endfor %}
    </table>
    
    <h2>Methodology</h2>
    <p>{{ report.methodology.description }}</p>
    
    <h3>Testing Phases</h3>
    <ol>
        {% for phase in report.methodology.phases %}
        <li>{{ phase }}</li>
        {% endfor %}
    </ol>
    
    <div class="footer">
        <p>Report generated by Comprehensive Vulnerability Assessment Tool</p>
        <p>{{ report.footer }}</p>
    </div>
</body>
</html>"""
            
            # Write the template to the file
            with open(report_template_path, 'w', encoding='utf-8') as f:
                f.write(template_content)
    
    def calculate_risk_score(self, vulnerability):
        """
        Calculate a comprehensive risk score based on the vulnerability details.
        
        Factors considered:
        - Technical Impact (1-10)
        - Business Impact (1-10)
        - Exploitability (1-10)
        - Data Sensitivity (1-10)
        - Affected Users (1-10)
        
        Returns a score from 0 to 10.
        """
        # Extract scores from vulnerability details (if available)
        technical_impact = vulnerability.get("technical_impact_score", 5)
        business_impact = vulnerability.get("business_impact_score", 5)
        exploitability = vulnerability.get("exploitability_score", 5)
        data_sensitivity = vulnerability.get("data_sensitivity", 5)
        affected_users = vulnerability.get("affected_users", 5)
        
        # Calculate weighted average
        weighted_score = (
            technical_impact * 0.25 +
            business_impact * 0.25 +
            exploitability * 0.25 +
            data_sensitivity * 0.15 +
            affected_users * 0.10
        )
        
        # Round to 1 decimal place
        return round(weighted_score, 1)
    
    def determine_risk_level(self, risk_score):
        """Determine the risk level based on the risk score"""
        for level, details in self.risk_levels.items():
            min_score, max_score = details["score_range"]
            if min_score <= risk_score <= max_score:
                return level
        
        # Default to Informational if no match
        return "Informational"
    
    def generate_business_impact(self, vulnerability):
        """Generate a detailed business impact analysis based on the vulnerability type"""
        vuln_type = vulnerability.get("type", "").lower()
        severity = vulnerability.get("severity", "Medium")
        
        # Default impact
        impact = {
            "description": "This vulnerability could potentially impact business operations and data security.",
            "consequences": [
                "Potential data exposure",
                "Service disruption",
                "Damage to reputation"
            ],
            "financial_impact": "Undetermined - depends on specific business context",
            "regulatory_impact": "Potential regulatory implications depending on data involved and jurisdiction"
        }
        
        # Custom impact by vulnerability type
        if "sql_injection" in vuln_type:
            impact = {
                "description": "SQL Injection vulnerabilities can have severe business implications due to the potential for data theft, data corruption, or complete system compromise.",
                "consequences": [
                    "Unauthorized access to sensitive customer data",
                    "Theft of proprietary business information",
                    "Corruption or deletion of critical database records",
                    "Potential for complete system takeover",
                    "Failure to meet regulatory compliance obligations"
                ],
                "financial_impact": "High - potential costs include incident response, customer notification, regulatory fines, legal settlements, and loss of business due to reputational damage",
                "regulatory_impact": "May trigger mandatory breach reporting under GDPR, CCPA, or other data protection regulations, with potential fines up to 4% of global annual revenue"
            }
        elif "xss" in vuln_type:
            impact = {
                "description": "Cross-Site Scripting vulnerabilities allow attackers to target your users, potentially leading to account compromise, data theft, or brand damage.",
                "consequences": [
                    "Theft of user credentials and session tokens",
                    "Hijacking of user accounts",
                    "Distribution of malicious content under your website's name",
                    "Customer data exposure",
                    "Erosion of customer trust in your brand"
                ],
                "financial_impact": "Medium to High - costs may include incident response, loss of customers, potential legal claims, and brand recovery expenses",
                "regulatory_impact": "May require breach notification if personal data is compromised"
            }
        elif "csrf" in vuln_type:
            impact = {
                "description": "Cross-Site Request Forgery vulnerabilities allow attackers to perform actions on behalf of authenticated users, potentially leading to account compromise or unauthorized transactions.",
                "consequences": [
                    "Unauthorized transactions or data modifications",
                    "Account setting changes",
                    "Privilege escalation",
                    "Financial losses for users or the business"
                ],
                "financial_impact": "Medium - potential for direct financial losses through unauthorized transactions, plus remediation costs",
                "regulatory_impact": "May require breach notification depending on the nature of affected data"
            }
        
        return impact
    
    def generate_exploitation_steps(self, vulnerability):
        """Generate detailed exploitation steps if not provided"""
        exploitation_steps = vulnerability.get("exploitation_steps", [])
        
        # If exploitation steps are provided as a string, split by newlines
        if isinstance(exploitation_steps, str):
            exploitation_steps = exploitation_steps.split("\n")
        
        # If no exploitation steps are provided, generate default ones
        if not exploitation_steps:
            vulnerability_type = vulnerability.get("type", "").lower()
            
            # Always include these default steps
            exploitation_steps = [
                "1. Identify the vulnerable component",
                "2. Prepare the exploit payload",
                "3. Execute the exploit against the target system"
            ]
            
            # Add type-specific steps if relevant
            if "injection" in vulnerability_type:
                exploitation_steps.extend([
                    "4. Inject malicious payload into the input field",
                    "5. Verify the execution of the injected code"
                ])
            elif "xss" in vulnerability_type:
                exploitation_steps.extend([
                    "4. Inject JavaScript payload into the input field",
                    "5. Verify that the script executes when the page is loaded"
                ])
            elif "csrf" in vulnerability_type:
                exploitation_steps.extend([
                    "4. Create a malicious page that submits a request to the vulnerable endpoint",
                    "5. Trick a logged-in user into visiting the malicious page"
                ])
        
        return exploitation_steps
    
    def generate_attack_scenario(self, vulnerability):
        """Generate a realistic attack scenario based on the vulnerability type"""
        # If an attack scenario is already provided, use it
        if "attack_scenario" in vulnerability and vulnerability["attack_scenario"]:
            return vulnerability["attack_scenario"]
        
        # If an exploitation scenario is provided, use it
        if "exploitation_scenario" in vulnerability and vulnerability["exploitation_scenario"]:
            return vulnerability["exploitation_scenario"]
            
        # Otherwise, generate a default scenario based on the vulnerability type
        vulnerability_type = vulnerability.get("type", "").lower()
        affected_component = vulnerability.get("parameter", "the system")
        
        # Default scenario
        attack_scenario = f"An attacker could exploit this vulnerability in {affected_component} to compromise the security of the system."
        
        # Type-specific scenarios
        if "sql" in vulnerability_type and "injection" in vulnerability_type:
            attack_scenario = f"An attacker could inject malicious SQL queries into {affected_component}, potentially allowing them to access, modify, or delete sensitive data in the database."
        elif "xss" in vulnerability_type:
            attack_scenario = f"An attacker could inject malicious JavaScript into {affected_component} that would execute in victims' browsers, potentially stealing session tokens, redirecting to phishing sites, or capturing keystrokes."
        elif "csrf" in vulnerability_type:
            attack_scenario = f"An attacker could trick authenticated users into performing unintended actions on {affected_component} without their knowledge or consent."
        elif "rce" in vulnerability_type or "command" in vulnerability_type and "injection" in vulnerability_type:
            attack_scenario = f"An attacker could execute arbitrary code or commands on the server through {affected_component}, potentially gaining full control of the affected system."
        elif "path traversal" in vulnerability_type or "lfi" in vulnerability_type:
            attack_scenario = f"An attacker could access files outside the intended directory through {affected_component}, potentially exposing sensitive configuration files or credentials."
        elif "open redirect" in vulnerability_type:
            attack_scenario = f"An attacker could use {affected_component} to redirect users to malicious websites, facilitating phishing attacks."
        elif "ssrf" in vulnerability_type:
            attack_scenario = f"An attacker could force the server to make requests to internal resources through {affected_component}, potentially accessing sensitive internal services."
        
        return attack_scenario
    
    def generate_report(self, scan_results, client_info=None, output_format="all"):
        """
        Generate a comprehensive client vulnerability report.
        
        Args:
            scan_results: The results of the vulnerability scan
            client_info: Information about the client (optional)
            output_format: The output format for the report ('json', 'html', 'pdf', or 'all')
        
        Returns:
            A dictionary with paths to the generated report files
        """
        logger.info("Generating client vulnerability report")
        
        # Create a report directory with timestamp
        current_datetime = datetime.datetime.now()
        report_id = f"{current_datetime.strftime('%Y%m%d')}_{scan_results.get('scan_id', str(int(time.time())))}"
        report_path = os.path.join(self.report_dir, f"client_report_{report_id}")
        os.makedirs(report_path, exist_ok=True)
        
        # Process vulnerabilities
        processed_vulnerabilities = []
        risk_summary = defaultdict(int)
        
        for vuln in scan_results.get("vulnerabilities", []):
            # Calculate risk score if not provided
            if "risk_score" not in vuln:
                vuln["risk_score"] = self.calculate_risk_score(vuln)
            
            # Determine risk level if not provided
            if "severity" not in vuln:
                vuln["severity"] = self.determine_risk_level(vuln["risk_score"])
            
            # Add detailed business impact analysis
            if "business_impact" not in vuln:
                vuln["business_impact"] = self.generate_business_impact(vuln)
                
            # Look for detailed exploitation information in vulnerable_components
            if "vulnerable_components" in scan_results:
                vuln_type = vuln.get("type", "").lower()
                # Find matching component by type
                for component in scan_results["vulnerable_components"]:
                    component_type = component.get("vulnerability_type", "")
                    if component_type.lower() in vuln_type or vuln_type in component_type.lower():
                        # Extract detailed exploitation info
                        if "detailed_exploitation" in component:
                            vuln["detailed_exploitation"] = component["detailed_exploitation"]
                        break
            
            # Add detailed exploitation steps with more comprehensive information
            if "exploitation_steps" not in vuln or not isinstance(vuln["exploitation_steps"], list):
                # First try to get steps from detailed_exploitation
                if "detailed_exploitation" in vuln and "steps" in vuln["detailed_exploitation"]:
                    vuln["exploitation_steps"] = vuln["detailed_exploitation"]["steps"]
                else:
                    vuln["exploitation_steps"] = self.generate_exploitation_steps(vuln)
            
            # Add detailed exploitation code examples if available
            if "exploitation_code" not in vuln:
                if "detailed_exploitation" in vuln and "code_examples" in vuln["detailed_exploitation"]:
                    # Concatenate code examples from different languages
                    code_examples = vuln["detailed_exploitation"]["code_examples"]
                    if code_examples:
                        vuln["exploitation_code"] = "\n\n".join([f"// {lang.upper()} EXAMPLE:\n{code}" for lang, code in code_examples.items()])
            
            # Add command examples if available
            if "exploitation_commands" not in vuln:
                if "detailed_exploitation" in vuln and "command_examples" in vuln["detailed_exploitation"]:
                    vuln["exploitation_commands"] = vuln["detailed_exploitation"]["command_examples"]
            
            # Add required tools if available
            if "exploitation_tools" not in vuln:
                if "detailed_exploitation" in vuln and "required_tools" in vuln["detailed_exploitation"]:
                    vuln["exploitation_tools"] = vuln["detailed_exploitation"]["required_tools"]
            
            # Add attack scenario
            if "attack_scenario" not in vuln:
                vuln["attack_scenario"] = self.generate_attack_scenario(vuln)
            
            # Add exploitation scenario if not present
            if "exploitation_scenario" not in vuln:
                vuln["exploitation_scenario"] = "A potential attacker could exploit this vulnerability to compromise the system."
            
            # Add detailed risk info for non-informational vulnerabilities
            if vuln.get("severity") != "Informational" and "detailed_risk_info" not in vuln:
                vuln["detailed_risk_info"] = self._generate_detailed_risk_info(vuln)
            
            # Count vulnerabilities by risk level
            risk_summary[vuln["severity"]] += 1
            
            # Process the vulnerability
            processed_vulnerabilities.append(vuln)
        
        # Sort vulnerabilities by severity (Critical first)
        severity_order = {"Critical": 0, "High": 1, "Medium": 2, "Low": 3, "Informational": 4}
        processed_vulnerabilities.sort(key=lambda x: severity_order.get(x.get("severity", "Low"), 9))
        
        # Calculate overall risk level
        if processed_vulnerabilities:
            avg_risk_score = sum(v["risk_score"] for v in processed_vulnerabilities) / len(processed_vulnerabilities)
            overall_risk_level = self.determine_risk_level(avg_risk_score)
        else:
            avg_risk_score = 0
            overall_risk_level = "Informational"
        
        # Generate key findings
        key_findings = []
        for severity in ["Critical", "High"]:
            for vuln in [v for v in processed_vulnerabilities if v["severity"] == severity]:
                key_findings.append(f"{vuln['name']} in {vuln.get('affected_component', 'the application')} - {severity} Risk")
                if len(key_findings) >= 5:
                    break
            if len(key_findings) >= 5:
                break
        
        if not key_findings and processed_vulnerabilities:
            for vuln in processed_vulnerabilities[:3]:
                key_findings.append(f"{vuln['name']} in {vuln.get('affected_component', 'the application')} - {vuln['severity']} Risk")
        
        # Create report structure
        client_name = client_info.get("name", "Client") if client_info else "Client"
        target = scan_results.get("target", "Unknown Target")
        
        report = {
            "title": f"Security Vulnerability Assessment Report for {client_name}",
            "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "report_id": report_id,
            "target": target,
            "executive_summary": self._generate_executive_summary(scan_results, risk_summary, client_name),
            "overall_risk_level": overall_risk_level,
            "average_risk_score": avg_risk_score,
            "risk_summary": dict(risk_summary),
            "key_findings": key_findings,
            "vulnerabilities": processed_vulnerabilities,
            "remediation_plan": self._generate_remediation_plan(processed_vulnerabilities),
            "methodology": {
                "description": "This assessment used a comprehensive approach to identify security vulnerabilities in the target system, with specific focus on exploitation potential and business impact.",
                "phases": [
                    "Reconnaissance and Information Gathering",
                    "Vulnerability Scanning and Discovery",
                    "Manual Testing and Verification",
                    "Exploitation Testing",
                    "Business Impact Analysis",
                    "Remediation Planning"
                ]
            },
            "client_info": client_info,
            "footer": "Confidential - For internal use only"
        }
        
        # Add logo if available
        if client_info and "logo_path" in client_info:
            report["logo_path"] = client_info["logo_path"]
        
        # Generate reports in requested formats
        generated_files = {}
        
        if output_format in ["json", "all"]:
            json_path = os.path.join(report_path, "vulnerability_report.json")
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=4)
            generated_files["json"] = json_path
            logger.info(f"JSON report generated: {json_path}")
        
        if output_format in ["html", "all"]:
            html_path = os.path.join(report_path, "vulnerability_report.html")
            try:
                template = self.template_env.get_template("client_vulnerability_report.html")
                html_content = template.render(report=report, risk_levels=self.risk_levels)
                with open(html_path, 'w', encoding='utf-8') as f:
                    f.write(html_content)
                generated_files["html"] = html_path
                logger.info(f"HTML report generated: {html_path}")
            except Exception as e:
                logger.error(f"Error generating HTML report: {str(e)}")
                # Fallback to simplified HTML if template fails
                self._generate_fallback_html_report(report, html_path)
                generated_files["html"] = html_path
        
        if output_format in ["pdf", "all"]:
            pdf_path = os.path.join(report_path, "vulnerability_report.pdf")
            try:
                # Convert HTML to PDF if we have HTML report
                if "html" in generated_files:
                    pdfkit.from_file(generated_files["html"], pdf_path)
                    generated_files["pdf"] = pdf_path
                    logger.info(f"PDF report generated: {pdf_path}")
                else:
                    logger.error("Cannot generate PDF: HTML report not available")
            except Exception as e:
                logger.error(f"Error generating PDF report: {str(e)}")
        
        return generated_files
    
    def _generate_executive_summary(self, scan_results, risk_summary, client_name="Client"):
        """Generate an executive summary for the report"""
        target = scan_results.get("target", "the target system")
        total_vulns = sum(risk_summary.values())
        
        critical_high = risk_summary.get("Critical", 0) + risk_summary.get("High", 0)
        
        if critical_high > 0:
            risk_description = "significant security concerns"
            if risk_summary.get("Critical", 0) > 0:
                risk_description = "critical security vulnerabilities"
        elif risk_summary.get("Medium", 0) > 0:
            risk_description = "moderate security concerns"
        elif risk_summary.get("Low", 0) > 0:
            risk_description = "minor security concerns"
        else:
            risk_description = "minimal security concerns"
        
        summary = f"""
The security assessment of {target} identified {total_vulns} vulnerabilities, indicating {risk_description}. 
"""
        
        if critical_high > 0:
            summary += f"The presence of {critical_high} Critical/High risk findings requires immediate attention as they could be exploited by attackers to gain unauthorized access, steal sensitive data, or disrupt business operations. "
        
        if "reconnaissance" in scan_results:
            tech_info = scan_results.get("reconnaissance", {}).get("passive", {})
            if tech_info:
                summary += "The assessment identified technical information that could be valuable for attackers in planning targeted attacks against your systems. "
        
        summary += f"""
This report provides:
1. Detailed information about each vulnerability
2. Step-by-step exploitation scenarios showing how attackers could leverage these weaknesses
3. Analysis of potential business impact for {client_name}
4. Comprehensive remediation instructions with code examples where applicable
5. A prioritized remediation plan to address the most critical issues first

We recommend addressing Critical and High risk vulnerabilities immediately to protect your systems and data from potential compromise.
"""
        
        return summary.strip()
    
    def _generate_remediation_plan(self, vulnerabilities):
        """Generate a prioritized remediation plan with timelines"""
        # Sort vulnerabilities by severity
        severity_order = {"Critical": 0, "High": 1, "Medium": 2, "Low": 3, "Informational": 4}
        sorted_vulns = sorted(vulnerabilities, key=lambda x: (severity_order.get(x.get("severity", "Low"), 9), -x.get("risk_score", 0)))
        
        # Create plan
        prioritized_actions = []
        for i, vuln in enumerate(sorted_vulns):
            severity = vuln.get("severity", "Low")
            name = vuln.get("name", "Unnamed vulnerability")
            component = vuln.get("affected_component", "the system")
            
            # Determine timeline based on severity
            if severity == "Critical":
                timeline = "Immediate (24-48 hours)"
                priority = "P0"
            elif severity == "High":
                timeline = "Urgent (1 week)"
                priority = "P1"
            elif severity == "Medium":
                timeline = "Near-term (1 month)"
                priority = "P2"
            else:
                timeline = "Regular development cycle (3 months)"
                priority = "P3"
            
            action = f"Fix {name} in {component}"
            
            prioritized_actions.append({
                "priority": priority,
                "vulnerability": name,
                "action": action,
                "timeline": timeline
            })
        
        # Add general recommendations if few vulnerabilities were found
        if len(prioritized_actions) < 5:
            general_recommendations = [
                {
                    "priority": "P2",
                    "vulnerability": "General Security Posture",
                    "action": "Implement a regular vulnerability scanning program",
                    "timeline": "Near-term (1 month)"
                },
                {
                    "priority": "P2",
                    "vulnerability": "Developer Training",
                    "action": "Conduct security awareness training for development teams",
                    "timeline": "Near-term (1 month)"
                },
                {
                    "priority": "P2",
                    "vulnerability": "Code Review Process",
                    "action": "Establish a security review process for all code changes",
                    "timeline": "Near-term (1 month)"
                },
                {
                    "priority": "P3",
                    "vulnerability": "Bug Bounty Program",
                    "action": "Implement a responsible disclosure policy",
                    "timeline": "Regular development cycle (3 months)"
                },
                {
                    "priority": "P2",
                    "vulnerability": "Web Application Security",
                    "action": "Implement a web application firewall",
                    "timeline": "Near-term (1 month)"
                }
            ]
            
            for rec in general_recommendations:
                if len(prioritized_actions) < 10:
                    prioritized_actions.append(rec)
        
        return {
            "description": "The following actions are recommended to address the identified vulnerabilities, prioritized by risk level:",
            "prioritized_actions": prioritized_actions
        }
    
    def _generate_fallback_html_report(self, report, output_path):
        """Generate a simplified HTML report as fallback if the template fails"""
        html_content = f"""<!DOCTYPE html>
<html>
<head>
    <title>{report['title']}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        h1, h2, h3 {{ color: #333; }}
        .vulnerability {{ margin: 20px 0; padding: 10px; border: 1px solid #ddd; }}
        .Critical {{ border-left: 5px solid #FF0000; }}
        .High {{ border-left: 5px solid #FF4500; }}
        .Medium {{ border-left: 5px solid #FFA500; }}
        .Low {{ border-left: 5px solid #FFFF00; }}
        .Informational {{ border-left: 5px solid #1E90FF; }}
    </style>
</head>
<body>
    <h1>{report['title']}</h1>
    <p>Generated on: {report['date']}</p>
    <p>Target: {report['target']}</p>
    <p>Report ID: {report['report_id']}</p>
    
    <h2>Executive Summary</h2>
    <p>{report['executive_summary']}</p>
    
    <h2>Risk Summary</h2>
    <p>Overall Risk: {report['overall_risk_level']}</p>
    <ul>
"""
        
        for level, count in report['risk_summary'].items():
            html_content += f"        <li>{level}: {count}</li>\n"
        
        html_content += """    </ul>
    
    <h2>Key Findings</h2>
    <ul>
"""
        
        for finding in report['key_findings']:
            html_content += f"        <li>{finding}</li>\n"
            
        html_content += """    </ul>
    
    <h2>Vulnerabilities</h2>
"""
        
        for vuln in report['vulnerabilities']:
            severity = vuln.get('severity', 'Informational')
            html_content += f"""    <div class="vulnerability {severity}">
        <h3>{vuln.get('name', 'Unnamed Vulnerability')} ({severity})</h3>
        <p><strong>Risk Score:</strong> {vuln.get('risk_score', 'N/A')}</p>
        <p><strong>Description:</strong> {vuln.get('description', 'No description provided')}</p>
        
        <h4>Exploitation</h4>
        <p>{vuln.get('technical_details', 'No technical details provided')}</p>
        
        <h4>Attack Scenario</h4>
        <p>{vuln.get('attack_scenario', 'No attack scenario provided')}</p>
        
        <h4>Business Impact</h4>
        <p>{vuln.get('business_impact', {}).get('description', 'No business impact provided')}</p>
        
        <h4>Remediation</h4>
        <p>{vuln.get('remediation', {}).get('description', 'No remediation provided')}</p>
    </div>
"""
        
        html_content += """    <h2>Remediation Plan</h2>
    <p>"""
        html_content += report['remediation_plan']['description']
        html_content += """</p>
    <table border="1" cellpadding="5">
        <tr>
            <th>Priority</th>
            <th>Vulnerability</th>
            <th>Action</th>
            <th>Timeline</th>
        </tr>
"""
        
        for action in report['remediation_plan']['prioritized_actions']:
            html_content += f"""        <tr>
            <td>{action['priority']}</td>
            <td>{action['vulnerability']}</td>
            <td>{action['action']}</td>
            <td>{action['timeline']}</td>
        </tr>
"""
        
        html_content += """    </table>
    
    <div style="margin-top: 30px; text-align: center;">
        <p>Report generated by Client Vulnerability Assessment Tool</p>
        <p>Confidential - For internal use only</p>
    </div>
</body>
</html>"""
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logger.info(f"Fallback HTML report generated: {output_path}")

    def _generate_detailed_risk_info(self, vulnerability):
        """Generate detailed risk information for a vulnerability"""
        risk_level = vulnerability.get("severity", "Informational")
        
        # Default detailed risk information
        detailed_info = {
            "likelihood": "Medium",
            "data_exposure": "Potential exposure of sensitive data",
            "affected_systems": "Systems handling the vulnerable component",
            "attack_vector": vulnerability.get("attack_vector", "Network/Web"),
            "potential_attackers": "External threat actors, malicious users",
            "mitigation_complexity": "Moderate - requires specific security controls",
            "business_criticality": "Depends on the affected component",
            "data_classification": "Potentially sensitive",
            "compliance_impact": "May affect regulatory compliance depending on data involved"
        }
        
        # Enhance with vulnerability-specific information if available
        if "risk_details" in vulnerability and isinstance(vulnerability["risk_details"], dict):
            detailed_info.update(vulnerability["risk_details"])
            
        return detailed_info

# Add this class as a wrapper for backward compatibility
class ClientVulnerabilityReport:
    """
    Wrapper class for ClientVulnerabilityReporter for backward compatibility
    """
    
    def __init__(self, report_dir="client_reports"):
        self.reporter = ClientVulnerabilityReporter(report_dir=report_dir)
    
    def generate_report(self, scan_results, client_info=None, output_format="all"):
        return self.reporter.generate_report(scan_results, client_info, output_format)
        
    def calculate_risk_score(self, vulnerability):
        return self.reporter.calculate_risk_score(vulnerability)
        
    def determine_risk_level(self, risk_score):
        return self.reporter.determine_risk_level(risk_score)

def generate_client_vulnerability_report(scan_results, client_info=None, output_dir=None, output_format="all"):
    """
    Convenience function to generate a client vulnerability report.
    
    Args:
        scan_results: The results of the vulnerability scan
        client_info: Information about the client (optional)
        output_dir: Directory to store the report
        output_format: Output format ('json', 'html', 'pdf', or 'all')
    
    Returns:
        Paths to the generated report files
    """
    if output_dir is None:
        output_dir = "client_reports"
    
    reporter = ClientVulnerabilityReporter(report_dir=output_dir)
    return reporter.generate_report(scan_results, client_info, output_format)

if __name__ == "__main__":
    # Example usage
    import argparse
    
    parser = argparse.ArgumentParser(description="Generate detailed client vulnerability reports")
    parser.add_argument("input_file", help="JSON file containing vulnerability scan results")
    parser.add_argument("--client-name", default="Client", help="Name of the client")
    parser.add_argument("--client-logo", help="Path to client logo for the report")
    parser.add_argument("--output-dir", "-o", default="client_reports", help="Directory to store the reports")
    parser.add_argument("--format", "-f", choices=["json", "html", "pdf", "all"], default="all", help="Report format")
    
    args = parser.parse_args()
    
    # Load scan results
    try:
        with open(args.input_file, 'r') as f:
            scan_results = json.load(f)
        
        # Set up client info
        client_info = {
            "name": args.client_name
        }
        
        if args.client_logo:
            client_info["logo_path"] = args.client_logo
        
        # Generate report
        report_files = generate_client_vulnerability_report(
            scan_results, 
            client_info,
            args.output_dir, 
            args.format
        )
        
        print(f"Client reports generated in {args.output_dir}:")
        for format_type, file_path in report_files.items():
            print(f"- {format_type.upper()}: {file_path}")
            
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1) 